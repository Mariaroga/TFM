**Lectura de la base de datos**

*Lectura*

```{r}
#leer csv
df <- read.csv2("~/Desktop/DATABASE.csv")
#para mostrar el número de variables y observaciones
num_variables <- ncol(df)
num_observaciones <- nrow(df)
cat("La base de datos está formada por", num_variables, "variables y", num_observaciones, "observaciones.\n")
#tendré datos de compuestos sin identificar (no sabemos si podemos compartir la ID de los compuestos) en las librerías por lo que le asignamos el nombre compuesto 1 a cada uno de los metabolitos detectados (en este caso mantengo las dos últimas columnas)
nombres_ultimas <- colnames(df)[(ncol(df)-1):ncol(df)]
nombres_nuevos <- paste("Compuesto", 1:(ncol(df)-2))
nombres_totales <- c(nombres_nuevos, nombres_ultimas)
colnames(df) <- nombres_totales
```

*Comprobación y cambio de tipo de variables*

```{r}
#instalamos el paquete pastecs que necesitaremos para hacer una estadística descriptiva
install.packages("pastecs")
library(pastecs)
#Comprobar el tipo de variables
options(max.print = 10000)
str(df)
capture.output(str(df), file = "estructura_variables_datos.txt")
#cambio de las variables numéricas a variables categóricas:
df$FIBROSI<-as.factor(df$FIBROSI)
df$NASH<-as.factor(df$NASH)
#eliminamos aquellas filas que contienen valores faltantes
datos<-na.omit(df)
#para eliminar las columnas que indican el grupo al que pertenecen (no supervisada)
data_NF<-datos[, -c(102:103)]
#resumen estadístico de los datos
summary(data_NF)
stat.desc(data_NF)
#se puede observar que los datos no están normalizados por lo que tendremos que hacer una normalización (es lo que esperamos)
boxplot(data_NF) #lo haremos en funcion de la intensidad de cada pico
#comprobacion de la distribucion normal de cada una de las variables
df.saphiro<-apply(data_NF, 2, shapiro.test)
df.saphiro
```
*Normalización*

```{r}
#para hacer la normalizacion de los datos usaremos el paquete limma
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

```
*Reducción del número de variables*
```{r}
install.packages("corrplot")
library(corrplot)
#comprobar si tenemos variables muy fuertemente relacionadas entre si:
matrizCorr<-cor(data_NF)#matriz de correlación
#grafico
corrplot(matrizCorr, order="hclust", tl.cex= .35)
#encontrar las variables relacionadas con umbral de correlación .75
ElevadaCorr<-findCorrelation(matrizCorr, .75)
#variables altamente relacionadas
ElevadaCorr
####quitar las columnas con correlacion
data_NF_simpl<-data_NF[,-c(ElevadaCorr)]
segCorr <- cor(data_NF_simpl)
corrplot(segCorr, order = "hclust", tl.cex = .35)
#comprobación de variables constantes
isZV <- apply(data_NF_simpl, 2, function(x) length(unique(x)) == 1)
isZV 
segPP <- preProcess(data_NF_simpl, c("BoxCox", "center", "scale"))
segTrainTrans <- predict(segPP, data_NF_simpl) 
```


